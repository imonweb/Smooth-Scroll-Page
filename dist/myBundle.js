/*! For license information please see myBundle.js.LICENSE.txt */
(()=>{var n={740:(n,e,t)=>{"use strict";t.d(e,{Z:()=>c});var o=t(15),r=t.n(o),a=t(645),i=t.n(a)()(r());i.push([n.id,"* {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\nbody {\n  background-color: #c1c6c3;\n  font-family: \"Poppins\", sans-serif;\n  background-color: #FF8066;\n  color: #fff;\n  line-height: 1.6;\n  height: 100vh;\n  overflow: hidden;\n}\n\n.container {\n  width: 100%;\n  height: 100%;\n  /*  CSS Smooth Scroll */\n  /* overflow-y: scroll;\n  scroll-behavior: smooth;\n  scroll-snap-type: y mandatory; */\n   /* add the scroll snap below on section */\n}\n\n.navbar {\n  position: fixed;\n  top: 0;\n  z-index: 1;\n  display: flex;\n  width: 100%;\n  height: 60px;\n  background: rgba(0,0,0,0.7);\n}\n\n.navbar ul {\n  display: flex;\n  list-style: none;\n  width: 100%;\n  justify-content: center;\n}\n\n.navbar ul li {\n  margin: 0 1rem;\n  padding: 1rem;\n}\n\n.navbar ul li a {\n  text-decoration: none;\n  text-transform: uppercase;\n  color: #f4f4f4;\n}\n\n.navbar ul li a:hover {\n  color: skyblue;\n}\n\nsection {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  text-align: center;\n  width: 100%;\n  height: 100vh;\n  /*  scroll snap */\n  scroll-snap-align: center;\n}\n\nsection h1 {\n  font-size: 4rem;\n}\n\nsection p {\n  font-size: 1.5rem;\n}\n\n \n/* ====== Section Images ====== */\n\nsection#home {\n  background: url('https://images.pexels.com/photos/3178786/pexels-photo-3178786.jpeg?cs=srgb&dl=pexels-andrew-neel-3178786.jpg&fm=jpg') no-repeat center center/cover;\n}\n\nsection#home h1 {\n  color: rgba(39, 15, 255, 0.927)\n}\n\n\nsection#about {\n  background: url('https://images.pexels.com/photos/3876433/pexels-photo-3876433.jpeg?cs=srgb&dl=pexels-tomas-anunziata-3876433.jpg&fm=jpg') no-repeat center center/cover;\n}\n\nsection#about h1 {\n  color: rgba(204, 18, 204, 0.927)\n}\n\nsection#service {\n  background: url('https://images.pexels.com/photos/34883/pexels-photo.jpg?cs=srgb&dl=pexels-donald-tong-34883.jpg&fm=jpg') no-repeat center center/cover;\n}\n\nsection#service h1 {\n  color: rgba(42, 240, 108, 0.927)\n}\n\nsection#contact {\n  background: url('https://images.pexels.com/photos/2360424/pexels-photo-2360424.jpeg?cs=srgb&dl=pexels-lisa-2360424.jpg&fm=jpg') no-repeat center center/cover;\n}\n\nsection#contact h1 {\n  color: rgba(252, 248, 10, 0.927)\n}","",{version:3,sources:["webpack://./src/css/styles.css"],names:[],mappings:"AAAA;EACE,sBAAsB;EACtB,SAAS;EACT,UAAU;AACZ;AACA;EACE,yBAAyB;EACzB,kCAAkC;EAClC,yBAAyB;EACzB,WAAW;EACX,gBAAgB;EAChB,aAAa;EACb,gBAAgB;AAClB;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,uBAAuB;EACvB;;kCAEgC;GAC/B,yCAAyC;AAC5C;;AAEA;EACE,eAAe;EACf,MAAM;EACN,UAAU;EACV,aAAa;EACb,WAAW;EACX,YAAY;EACZ,2BAA2B;AAC7B;;AAEA;EACE,aAAa;EACb,gBAAgB;EAChB,WAAW;EACX,uBAAuB;AACzB;;AAEA;EACE,cAAc;EACd,aAAa;AACf;;AAEA;EACE,qBAAqB;EACrB,yBAAyB;EACzB,cAAc;AAChB;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,mBAAmB;EACnB,uBAAuB;EACvB,kBAAkB;EAClB,WAAW;EACX,aAAa;EACb,iBAAiB;EACjB,yBAAyB;AAC3B;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,iBAAiB;AACnB;;;AAGA,iCAAiC;;AAEjC;EACE,oKAAoK;AACtK;;AAEA;EACE;AACF;;;AAGA;EACE,wKAAwK;AAC1K;;AAEA;EACE;AACF;;AAEA;EACE,uJAAuJ;AACzJ;;AAEA;EACE;AACF;;AAEA;EACE,6JAA6J;AAC/J;;AAEA;EACE;AACF",sourcesContent:["* {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\nbody {\n  background-color: #c1c6c3;\n  font-family: \"Poppins\", sans-serif;\n  background-color: #FF8066;\n  color: #fff;\n  line-height: 1.6;\n  height: 100vh;\n  overflow: hidden;\n}\n\n.container {\n  width: 100%;\n  height: 100%;\n  /*  CSS Smooth Scroll */\n  /* overflow-y: scroll;\n  scroll-behavior: smooth;\n  scroll-snap-type: y mandatory; */\n   /* add the scroll snap below on section */\n}\n\n.navbar {\n  position: fixed;\n  top: 0;\n  z-index: 1;\n  display: flex;\n  width: 100%;\n  height: 60px;\n  background: rgba(0,0,0,0.7);\n}\n\n.navbar ul {\n  display: flex;\n  list-style: none;\n  width: 100%;\n  justify-content: center;\n}\n\n.navbar ul li {\n  margin: 0 1rem;\n  padding: 1rem;\n}\n\n.navbar ul li a {\n  text-decoration: none;\n  text-transform: uppercase;\n  color: #f4f4f4;\n}\n\n.navbar ul li a:hover {\n  color: skyblue;\n}\n\nsection {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  text-align: center;\n  width: 100%;\n  height: 100vh;\n  /*  scroll snap */\n  scroll-snap-align: center;\n}\n\nsection h1 {\n  font-size: 4rem;\n}\n\nsection p {\n  font-size: 1.5rem;\n}\n\n \n/* ====== Section Images ====== */\n\nsection#home {\n  background: url('https://images.pexels.com/photos/3178786/pexels-photo-3178786.jpeg?cs=srgb&dl=pexels-andrew-neel-3178786.jpg&fm=jpg') no-repeat center center/cover;\n}\n\nsection#home h1 {\n  color: rgba(39, 15, 255, 0.927)\n}\n\n\nsection#about {\n  background: url('https://images.pexels.com/photos/3876433/pexels-photo-3876433.jpeg?cs=srgb&dl=pexels-tomas-anunziata-3876433.jpg&fm=jpg') no-repeat center center/cover;\n}\n\nsection#about h1 {\n  color: rgba(204, 18, 204, 0.927)\n}\n\nsection#service {\n  background: url('https://images.pexels.com/photos/34883/pexels-photo.jpg?cs=srgb&dl=pexels-donald-tong-34883.jpg&fm=jpg') no-repeat center center/cover;\n}\n\nsection#service h1 {\n  color: rgba(42, 240, 108, 0.927)\n}\n\nsection#contact {\n  background: url('https://images.pexels.com/photos/2360424/pexels-photo-2360424.jpeg?cs=srgb&dl=pexels-lisa-2360424.jpg&fm=jpg') no-repeat center center/cover;\n}\n\nsection#contact h1 {\n  color: rgba(252, 248, 10, 0.927)\n}"],sourceRoot:""}]);const c=i},645:n=>{"use strict";n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t=n(e);return e[2]?"@media ".concat(e[2]," {").concat(t,"}"):t})).join("")},e.i=function(n,t,o){"string"==typeof n&&(n=[[null,n,""]]);var r={};if(o)for(var a=0;a<this.length;a++){var i=this[a][0];null!=i&&(r[i]=!0)}for(var c=0;c<n.length;c++){var s=[].concat(n[c]);o&&r[s[0]]||(t&&(s[2]?s[2]="".concat(t," and ").concat(s[2]):s[2]=t),e.push(s))}},e}},15:n=>{"use strict";function e(n,e){(null==e||e>n.length)&&(e=n.length);for(var t=0,o=new Array(e);t<e;t++)o[t]=n[t];return o}n.exports=function(n){var t,o,r=(o=4,function(n){if(Array.isArray(n))return n}(t=n)||function(n,e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(n)){var t=[],o=!0,r=!1,a=void 0;try{for(var i,c=n[Symbol.iterator]();!(o=(i=c.next()).done)&&(t.push(i.value),!e||t.length!==e);o=!0);}catch(n){r=!0,a=n}finally{try{o||null==c.return||c.return()}finally{if(r)throw a}}return t}}(t,o)||function(n,t){if(n){if("string"==typeof n)return e(n,t);var o=Object.prototype.toString.call(n).slice(8,-1);return"Object"===o&&n.constructor&&(o=n.constructor.name),"Map"===o||"Set"===o?Array.from(n):"Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o)?e(n,t):void 0}}(t,o)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),a=r[1],i=r[3];if("function"==typeof btoa){var c=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(c),l="/*# ".concat(s," */"),u=i.sources.map((function(n){return"/*# sourceURL=".concat(i.sourceRoot||"").concat(n," */")}));return[a].concat(u).concat([l]).join("\n")}return[a].join("\n")}},888:function(n,e,t){var o,r;r=void 0!==t.g?t.g:"undefined"!=typeof window?window:this,void 0===(o=function(){return function(n){"use strict";var e={ignore:"[data-scroll-ignore]",header:null,topOnEmptyHash:!0,speed:500,speedAsDuration:!1,durationMax:null,durationMin:null,clip:!0,offset:0,easing:"easeInOutCubic",customEasing:null,updateURL:!0,popstate:!0,emitEvents:!0},t=function(){var n={};return Array.prototype.forEach.call(arguments,(function(e){for(var t in e){if(!e.hasOwnProperty(t))return;n[t]=e[t]}})),n},o=function(n){"#"===n.charAt(0)&&(n=n.substr(1));for(var e,t=String(n),o=t.length,r=-1,a="",i=t.charCodeAt(0);++r<o;){if(0===(e=t.charCodeAt(r)))throw new InvalidCharacterError("Invalid character: the input contains U+0000.");a+=e>=1&&e<=31||127==e||0===r&&e>=48&&e<=57||1===r&&e>=48&&e<=57&&45===i?"\\"+e.toString(16)+" ":e>=128||45===e||95===e||e>=48&&e<=57||e>=65&&e<=90||e>=97&&e<=122?t.charAt(r):"\\"+t.charAt(r)}return"#"+a},r=function(){return Math.max(document.body.scrollHeight,document.documentElement.scrollHeight,document.body.offsetHeight,document.documentElement.offsetHeight,document.body.clientHeight,document.documentElement.clientHeight)},a=function(e){return e?(t=e,parseInt(n.getComputedStyle(t).height,10)+e.offsetTop):0;var t},i=function(e,t,o){0===e&&document.body.focus(),o||(e.focus(),document.activeElement!==e&&(e.setAttribute("tabindex","-1"),e.focus(),e.style.outline="none"),n.scrollTo(0,t))},c=function(e,t,o,r){if(t.emitEvents&&"function"==typeof n.CustomEvent){var a=new CustomEvent(e,{bubbles:!0,detail:{anchor:o,toggle:r}});document.dispatchEvent(a)}};return function(s,l){var u,A,d,p,f={cancelScroll:function(n){cancelAnimationFrame(p),p=null,n||c("scrollCancel",u)},animateScroll:function(o,s,l){f.cancelScroll();var A=t(u||e,l||{}),h="[object Number]"===Object.prototype.toString.call(o),m=h||!o.tagName?null:o;if(h||m){var g=n.pageYOffset;A.header&&!d&&(d=document.querySelector(A.header));var v,b,y,E=a(d),C=h?o:function(e,t,o,a){var i=0;if(e.offsetParent)do{i+=e.offsetTop,e=e.offsetParent}while(e);return i=Math.max(i-t-o,0),a&&(i=Math.min(i,r()-n.innerHeight)),i}(m,E,parseInt("function"==typeof A.offset?A.offset(o,s):A.offset,10),A.clip),x=C-g,B=r(),S=0,w=function(n,e){var t=e.speedAsDuration?e.speed:Math.abs(n/1e3*e.speed);return e.durationMax&&t>e.durationMax?e.durationMax:e.durationMin&&t<e.durationMin?e.durationMin:parseInt(t,10)}(x,A),j=function(e){v||(v=e),S+=e-v,y=g+x*function(n,e){var t;return"easeInQuad"===n.easing&&(t=e*e),"easeOutQuad"===n.easing&&(t=e*(2-e)),"easeInOutQuad"===n.easing&&(t=e<.5?2*e*e:(4-2*e)*e-1),"easeInCubic"===n.easing&&(t=e*e*e),"easeOutCubic"===n.easing&&(t=--e*e*e+1),"easeInOutCubic"===n.easing&&(t=e<.5?4*e*e*e:(e-1)*(2*e-2)*(2*e-2)+1),"easeInQuart"===n.easing&&(t=e*e*e*e),"easeOutQuart"===n.easing&&(t=1- --e*e*e*e),"easeInOutQuart"===n.easing&&(t=e<.5?8*e*e*e*e:1-8*--e*e*e*e),"easeInQuint"===n.easing&&(t=e*e*e*e*e),"easeOutQuint"===n.easing&&(t=1+--e*e*e*e*e),"easeInOutQuint"===n.easing&&(t=e<.5?16*e*e*e*e*e:1+16*--e*e*e*e*e),n.customEasing&&(t=n.customEasing(e)),t||e}(A,b=(b=0===w?0:S/w)>1?1:b),n.scrollTo(0,Math.floor(y)),function(e,t){var r=n.pageYOffset;if(e==t||r==t||(g<t&&n.innerHeight+r)>=B)return f.cancelScroll(!0),i(o,t,h),c("scrollStop",A,o,s),v=null,p=null,!0}(y,C)||(p=n.requestAnimationFrame(j),v=e)};0===n.pageYOffset&&n.scrollTo(0,0),function(n,e,t){e||history.pushState&&t.updateURL&&history.pushState({smoothScroll:JSON.stringify(t),anchor:n.id},document.title,n===document.documentElement?"#top":"#"+n.id)}(o,h,A),"matchMedia"in n&&n.matchMedia("(prefers-reduced-motion)").matches?i(o,Math.floor(C),!1):(c("scrollStart",A,o,s),f.cancelScroll(!0),n.requestAnimationFrame(j))}}},h=function(e){if(!e.defaultPrevented&&!(0!==e.button||e.metaKey||e.ctrlKey||e.shiftKey)&&"closest"in e.target&&(A=e.target.closest(s))&&"a"===A.tagName.toLowerCase()&&!e.target.closest(u.ignore)&&A.hostname===n.location.hostname&&A.pathname===n.location.pathname&&/#/.test(A.href)){var t,r;try{t=o(decodeURIComponent(A.hash))}catch(n){t=o(A.hash)}if("#"===t){if(!u.topOnEmptyHash)return;r=document.documentElement}else r=document.querySelector(t);(r=r||"#top"!==t?r:document.documentElement)&&(e.preventDefault(),function(e){if(history.replaceState&&e.updateURL&&!history.state){var t=n.location.hash;t=t||"",history.replaceState({smoothScroll:JSON.stringify(e),anchor:t||n.pageYOffset},document.title,t||n.location.href)}}(u),f.animateScroll(r,A))}},m=function(n){if(null!==history.state&&history.state.smoothScroll&&history.state.smoothScroll===JSON.stringify(u)){var e=history.state.anchor;"string"==typeof e&&e&&!(e=document.querySelector(o(history.state.anchor)))||f.animateScroll(e,null,{updateURL:!1})}};return f.destroy=function(){u&&(document.removeEventListener("click",h,!1),n.removeEventListener("popstate",m,!1),f.cancelScroll(),u=null,A=null,d=null,p=null)},function(){if(!("querySelector"in document&&"addEventListener"in n&&"requestAnimationFrame"in n&&"closest"in n.Element.prototype))throw"Smooth Scroll: This browser does not support the required JavaScript methods and browser APIs.";f.destroy(),u=t(e,l||{}),d=u.header?document.querySelector(u.header):null,document.addEventListener("click",h,!1),u.updateURL&&u.popstate&&n.addEventListener("popstate",m,!1)}(),f}}(r)}.apply(e,[]))||(n.exports=o)},379:(n,e,t)=>{"use strict";var o,r=function(){var n={};return function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}n[e]=t}return n[e]}}(),a=[];function i(n){for(var e=-1,t=0;t<a.length;t++)if(a[t].identifier===n){e=t;break}return e}function c(n,e){for(var t={},o=[],r=0;r<n.length;r++){var c=n[r],s=e.base?c[0]+e.base:c[0],l=t[s]||0,u="".concat(s," ").concat(l);t[s]=l+1;var A=i(u),d={css:c[1],media:c[2],sourceMap:c[3]};-1!==A?(a[A].references++,a[A].updater(d)):a.push({identifier:u,updater:h(d,e),references:1}),o.push(u)}return o}function s(n){var e=document.createElement("style"),o=n.attributes||{};if(void 0===o.nonce){var a=t.nc;a&&(o.nonce=a)}if(Object.keys(o).forEach((function(n){e.setAttribute(n,o[n])})),"function"==typeof n.insert)n.insert(e);else{var i=r(n.insert||"head");if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(e)}return e}var l,u=(l=[],function(n,e){return l[n]=e,l.filter(Boolean).join("\n")});function A(n,e,t,o){var r=t?"":o.media?"@media ".concat(o.media," {").concat(o.css,"}"):o.css;if(n.styleSheet)n.styleSheet.cssText=u(e,r);else{var a=document.createTextNode(r),i=n.childNodes;i[e]&&n.removeChild(i[e]),i.length?n.insertBefore(a,i[e]):n.appendChild(a)}}function d(n,e,t){var o=t.css,r=t.media,a=t.sourceMap;if(r?n.setAttribute("media",r):n.removeAttribute("media"),a&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),n.styleSheet)n.styleSheet.cssText=o;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(o))}}var p=null,f=0;function h(n,e){var t,o,r;if(e.singleton){var a=f++;t=p||(p=s(e)),o=A.bind(null,t,a,!1),r=A.bind(null,t,a,!0)}else t=s(e),o=d.bind(null,t,e),r=function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(t)};return o(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap)return;o(n=e)}else r()}}n.exports=function(n,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=(void 0===o&&(o=Boolean(window&&document&&document.all&&!window.atob)),o));var t=c(n=n||[],e);return function(n){if(n=n||[],"[object Array]"===Object.prototype.toString.call(n)){for(var o=0;o<t.length;o++){var r=i(t[o]);a[r].references--}for(var s=c(n,e),l=0;l<t.length;l++){var u=i(t[l]);0===a[u].references&&(a[u].updater(),a.splice(u,1))}t=s}}}}},e={};function t(o){var r=e[o];if(void 0!==r)return r.exports;var a=e[o]={id:o,exports:{}};return n[o].call(a.exports,a,a.exports,t),a.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var o in e)t.o(e,o)&&!t.o(n,o)&&Object.defineProperty(n,o,{enumerable:!0,get:e[o]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),(()=>{"use strict";var n=t(379),e=t.n(n),o=t(740);e()(o.Z,{insert:"head",singleton:!1}),o.Z.locals,t(888)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,